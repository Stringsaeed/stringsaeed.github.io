{"version":3,"sources":["components/page/index.tsx","components/background/index.tsx","pages/info.me.tsx","pages/description.me.tsx","pages/projects.me.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Page","children","className","Background","InfoMe","style","flexDirection","display","alignItems","justifyContent","borderBottomStyle","width","marginRight","name","size","src","$style","textAlign","onClick","window","open","icon","faGithub","marginLeft","faTwitter","faWhatsapp","faLinkedin","boxShadow","borderTopStyle","borderColor","borderInlineStartStyle","borderBlockStartStyle","DescriptionMe","ProjectsMe","engine","Styletron","App","value","theme","LightTheme","flex","Boolean","location","hostname","match","library","add","fab","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0WAMaA,G,MAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC/B,OAAO,uBAAKC,UAAU,QAAQD,KCDnBE,G,YAAa,WACxB,OAAO,uBAAKD,UAAU,iBCOXE,EAAS,WACpB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,yBACEC,MAAO,CACLC,cAAe,MACfC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,kBAAmB,SACnBC,MAAO,SAGT,yBAAKN,MAAO,CAAEO,YAAa,IACzB,kBAAC,IAAD,CACEC,KAAK,eACLC,KAAK,YACLC,IAAI,4GAGR,kBAAC,IAAD,wBAEF,6BACE,kBAAC,IAAD,CAAIC,OAAQ,CAAEC,UAAW,WAAzB,8BAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAS,kBAAMC,OAAOC,KAAK,uCAC3BC,KAAMC,IACNjB,MAAO,CAAEO,YAAa,EAAGW,WAAY,KAEvC,kBAAC,IAAD,CACEL,QAAS,kBAAMC,OAAOC,KAAK,wCAC3BC,KAAMG,IACNnB,MAAO,CAAEO,YAAa,EAAGW,WAAY,KAEvC,kBAAC,IAAD,CACEL,QAAS,kBACPC,OAAOC,KACL,mEAGJC,KAAMI,IACNpB,MAAO,CAAEO,YAAa,EAAGW,WAAY,KAEvC,kBAAC,IAAD,CACEL,QAAS,kBACPC,OAAOC,KACL,6JAGJC,KAAMK,IACNrB,MAAO,CAAEO,YAAa,EAAGW,WAAY,OAI3C,yBACElB,MAAO,CACLM,MAAO,IACPgB,UAAW,wBACXC,eAAgB,SAChBC,YAAa,OACbC,uBAAwB,SACxBC,sBAAuB,WAGzB,kBAAC,IAAD,KACE,kBAAC,IAAD,sBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,uBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,mCCpFCC,EAAgB,WAC3B,OACE,gBAAC,EAAD,KACE,gBAAC,IAAD,gBCHOC,EAAa,WACxB,OACE,gBAAC,EAAD,KACE,gBAAC,IAAD,mBCAAC,EAAS,IAAIC,IAgBJC,MAdf,WACE,OACE,kBAAC,IAAD,CAAmBC,MAAOH,GACxB,kBAAC,IAAD,CAAcI,MAAOC,KACnB,yBAAKlC,MAAO,CAAEmC,KAAM,EAAGjC,QAAS,OAAQD,cAAe,QACrD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCJUmC,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,KCVNC,EAAQC,IAAIC,KAEZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6c393ea.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { FC } from \"react\";\nimport './page.css';\n\ntype PageType = FC<{}>;\n\nexport const Page: PageType = ({ children }) => {\n  return <div className=\"Page\">{children}</div>;\n};\n","import * as React from \"react\";\nimport \"./background.css\";\nimport { ReactElement } from \"react\";\n\ntype BackgroundType = ReactElement;\n\nexport const Background = (): ReactElement => {\n  return <div className=\"Background\" />;\n};\n","import React from \"react\";\nimport { Avatar } from \"baseui/avatar\";\nimport { ListItem, ListItemLabel } from \"baseui/list\";\nimport { HeadingXLarge, H4 } from \"baseui/typography\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faGithub,\n  faTwitter,\n  faWhatsapp,\n  faLinkedin\n} from \"@fortawesome/free-brands-svg-icons\";\n\nimport { Page, Background } from \"../components\";\n\nexport const InfoMe = () => {\n  return (\n    <Page>\n      <Background />\n      <div\n        style={{\n          flexDirection: \"row\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          borderBottomStyle: \"dashed\",\n          width: \"100%\"\n        }}\n      >\n        <div style={{ marginRight: 5 }}>\n          <Avatar\n            name=\"String Saeed\"\n            size=\"scale1400\"\n            src=\"https://avatars2.githubusercontent.com/u/37156636?s=460&u=0fbc84dc98c2797a3b2ecac6b4f8663c3d1d1ae9&v=4\"\n          />\n        </div>\n        <HeadingXLarge>Muhammed Saeed</HeadingXLarge>\n      </div>\n      <div>\n        <H4 $style={{ textAlign: \"center\" }}>\n          Lead React Native Developer\n          <H4>\n            <FontAwesomeIcon\n              onClick={() => window.open(\"https://www.github.com/stringsaeed\")}\n              icon={faGithub}\n              style={{ marginRight: 5, marginLeft: 5 }}\n            />\n            <FontAwesomeIcon\n              onClick={() => window.open(\"https://www.twitter.com/stringsaeed\")}\n              icon={faTwitter}\n              style={{ marginRight: 5, marginLeft: 5 }}\n            />\n            <FontAwesomeIcon\n              onClick={() =>\n                window.open(\n                  \"whatsapp://send?phone=+201118784615&abid=+201118784615&text=Hi\"\n                )\n              }\n              icon={faWhatsapp}\n              style={{ marginRight: 5, marginLeft: 5 }}\n            />\n            <FontAwesomeIcon\n              onClick={() =>\n                window.open(\n                  \"https://www.linkedin.com/in/mohamed-saeed-480a43b6?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3BsD4dLTMfTtG2QAfz%2BGyvVA%3D%3D\"\n                )\n              }\n              icon={faLinkedin}\n              style={{ marginRight: 5, marginLeft: 5 }}\n            />\n          </H4>\n        </H4>\n        <div\n          style={{\n            width: 500,\n            boxShadow: \"black 5px 5px 0px 0px\",\n            borderTopStyle: \"dashed\",\n            borderColor: \"#000\",\n            borderInlineStartStyle: \"dashed\",\n            borderBlockStartStyle: \"dashed\"\n          }}\n        >\n          <ListItem>\n            <ListItemLabel>Cairo, Egypt</ListItemLabel>\n          </ListItem>\n          <ListItem>\n            <ListItemLabel>+201118784615</ListItemLabel>\n          </ListItem>\n          <ListItem>\n            <ListItemLabel>Stringsaeed@gmail.com</ListItemLabel>\n          </ListItem>\n        </div>\n      </div>\n    </Page>\n  );\n};\n","import * as React from \"react\";\nimport { Page } from \"../components\";\nimport { HeadingLarge } from \"baseui/typography\";\n\nexport const DescriptionMe = () => {\n  return (\n    <Page>\n      <HeadingLarge>About</HeadingLarge>\n    </Page>\n  );\n};\n","import * as React from \"react\";\nimport { Page } from \"../components\";\nimport { HeadingLarge } from \"baseui/typography\";\n\nexport const ProjectsMe = () => {\n  return (\n    <Page>\n      <HeadingLarge>Projects</HeadingLarge>\n    </Page>\n  );\n};\n","import React from \"react\";\nimport { LightTheme, BaseProvider } from \"baseui\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\n\nimport { InfoMe, DescriptionMe, ProjectsMe } from \"./pages\";\n\nconst engine = new Styletron();\n\nfunction App() {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <div style={{ flex: 1, display: \"flex\", flexDirection: \"row\" }}>\n          <InfoMe />\n          <DescriptionMe />\n          <ProjectsMe />\n        </div>\n      </BaseProvider>\n    </StyletronProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\n\nlibrary.add(fab);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}