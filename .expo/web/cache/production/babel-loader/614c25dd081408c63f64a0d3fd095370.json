{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButtonRow.tsx\";import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import ToggleButton from\"./ToggleButton\";var ToggleButtonRow=function(_React$Component){_inherits(ToggleButtonRow,_React$Component);function ToggleButtonRow(){_classCallCheck(this,ToggleButtonRow);return _possibleConstructorReturn(this,_getPrototypeOf(ToggleButtonRow).apply(this,arguments));}_createClass(ToggleButtonRow,[{key:\"render\",value:function render(){var _this$props=this.props,value=_this$props.value,onValueChange=_this$props.onValueChange,children=_this$props.children,style=_this$props.style;var count=React.Children.count(children);return React.createElement(ToggleButton.Group,{value:value,onValueChange:onValueChange,__source:{fileName:_jsxFileName,lineNumber:57}},React.createElement(View,{style:[styles.row,style],__source:{fileName:_jsxFileName,lineNumber:58}},React.Children.map(children,function(child,i){if(child&&child.type===ToggleButton){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));}}]);return ToggleButtonRow;}(React.Component);ToggleButtonRow.displayName='ToggleButton.Row';var styles=StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});export default ToggleButtonRow;","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","React","Component","displayName","value","onValueChange","children","style","count","styles","child","i","StyleSheet","row","flexDirection","button","borderWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"4bAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,sHAEA,MAAA,CAAA,YAAA,sBA8CMA,GAAAA,CAAAA,e,4SAGK,CAAA,GAAA,CAAA,WAAA,CAC2C,KAD3C,KAAA,CACCI,KADD,CAAA,WAAA,CAAA,KAAA,CACQC,aADR,CAAA,WAAA,CAAA,aAAA,CACuBC,QADvB,CAAA,WAAA,CAAA,QAAA,CACiCC,KADjC,CAAA,WAAA,CAAA,KAAA,CAEP,GAAMC,CAAAA,KAAK,CAAGP,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,KAAA,CAAA,CAAoB,KAAK,CAAzB,KAAA,CAAkC,aAAa,CAA/C,aAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAE,CAACQ,MAAM,CAAP,GAAA,CAAb,KAAa,CAAb,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CACGR,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAA6B,SAAA,KAAA,CAAA,CAAA,CAAc,CAE1C,GAAIS,KAAK,EAAIA,KAAK,CAALA,IAAAA,GAAb,YAAA,CAA0C,CAExC,MAAOT,CAAAA,KAAK,CAALA,YAAAA,CAAAA,KAAAA,CAA0B,CAC/BM,KAAK,CAAE,CACLE,MAAM,CADD,MAAA,CAELE,CAAC,GAADA,CAAAA,CACIF,MAAM,CADVE,KAAAA,CAEIA,CAAC,GAAKH,KAAK,CAAXG,CAAAA,CACAF,MAAM,CADNE,IAAAA,CAEAF,MAAM,CANL,MAAA,CAQLC,KAAK,CAALA,KAAAA,CATJ,KACS,CADwB,CAA1BT,CAAP,CAcF,OAAA,CAAA,KAAA,CArBR,CAGOA,CADH,CADF,CADF,C,8BAP0BA,KAAK,CAACC,S,CAA9BF,CAAAA,e,CACGG,WADHH,CACiB,kBADjBA,CAoCN,GAAMS,CAAAA,MAAM,CAAGG,UAAU,CAAVA,MAAAA,CAAkB,CAC/BC,GAAG,CAAE,CACHC,aAAa,CAFgB,KAC1B,CAD0B,CAI/BC,MAAM,CAAE,CACNC,WAAW,CAAEJ,UAAU,CALM,aAIvB,CAJuB,CAQ/BK,KAAK,CAAE,CACLC,oBAAoB,CADf,CAAA,CAELC,uBAAuB,CAVM,CAQxB,CARwB,CAa/BC,MAAM,CAAE,CACNC,YAAY,CADN,CAAA,CAENC,eAAe,CAfc,CAavB,CAbuB,CAkB/BC,IAAI,CAAE,CACJD,eAAe,CADX,CAAA,CAEJE,mBAAmB,CAFf,CAAA,CAGJC,sBAAsB,CArB1B,CAkBQ,CAlByB,CAAlBb,CAAf,CAyBA,cAAA,CAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Row\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Row>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonRow extends React.Component<Props> {\n  static displayName = 'ToggleButton.Row';\n\n  render() {\n    const { value, onValueChange, children, style } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButton.Group value={value} onValueChange={onValueChange}>\n        <View style={[styles.row, style]}>\n          {React.Children.map(children, (child, i) => {\n            // @ts-ignore\n            if (child && child.type === ToggleButton) {\n              // @ts-ignore\n              return React.cloneElement(child, {\n                style: [\n                  styles.button,\n                  i === 0\n                    ? styles.first\n                    : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                  // @ts-ignore\n                  child.props.style,\n                ],\n              });\n            }\n\n            return child;\n          })}\n        </View>\n      </ToggleButton.Group>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n"]},"metadata":{},"sourceType":"module"}