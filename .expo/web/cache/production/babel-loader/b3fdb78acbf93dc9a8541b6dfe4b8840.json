{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Chip.tsx\";import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import color from'color';import Icon from\"./Icon\";import Surface from\"./Surface\";import Text from\"./Typography/Text\";import TouchableRipple from\"./TouchableRipple\";import{withTheme}from\"../core/theming\";import{black,white}from\"../styles/colors\";var Chip=function(_React$Component){_inherits(Chip,_React$Component);function Chip(){var _getPrototypeOf2;var _this;_classCallCheck(this,Chip);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Chip)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={elevation:new Animated.Value(0)};_this.handlePressIn=function(){Animated.timing(_this.state.elevation,{toValue:4,duration:200}).start();};_this.handlePressOut=function(){Animated.timing(_this.state.elevation,{toValue:0,duration:150}).start();};return _this;}_createClass(Chip,[{key:\"render\",value:function render(){var _this$props=this.props,mode=_this$props.mode,children=_this$props.children,icon=_this$props.icon,avatar=_this$props.avatar,selected=_this$props.selected,disabled=_this$props.disabled,accessibilityLabel=_this$props.accessibilityLabel,onPress=_this$props.onPress,onLongPress=_this$props.onLongPress,onClose=_this$props.onClose,textStyle=_this$props.textStyle,style=_this$props.style,theme=_this$props.theme,testID=_this$props.testID,selectedColor=_this$props.selectedColor,rest=_objectWithoutProperties(_this$props,[\"mode\",\"children\",\"icon\",\"avatar\",\"selected\",\"disabled\",\"accessibilityLabel\",\"onPress\",\"onLongPress\",\"onClose\",\"textStyle\",\"style\",\"theme\",\"testID\",\"selectedColor\"]);var dark=theme.dark,colors=theme.colors;var _ref=StyleSheet.flatten(style)||{},_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?mode==='outlined'?colors.surface:dark?'#383838':'#ebebeb':_ref$backgroundColor,_ref$borderRadius=_ref.borderRadius,borderRadius=_ref$borderRadius===void 0?16:_ref$borderRadius;var borderColor=mode==='outlined'?color(selectedColor!==undefined?selectedColor:color(dark?white:black)).alpha(0.29).rgb().string():backgroundColor;var textColor=disabled?colors.disabled:color(selectedColor!==undefined?selectedColor:colors.text).alpha(0.87).rgb().string();var iconColor=disabled?colors.disabled:color(selectedColor!==undefined?selectedColor:colors.text).alpha(0.54).rgb().string();var selectedBackgroundColor=(dark?color(backgroundColor).lighten(mode==='outlined'?0.2:0.4):color(backgroundColor).darken(mode==='outlined'?0.08:0.2)).rgb().string();var underlayColor=selectedColor?color(selectedColor).fade(0.5).rgb().string():selectedBackgroundColor;var accessibilityTraits=['button'];var accessibilityStates=[];if(selected){accessibilityTraits.push('selected');accessibilityStates.push('selected');}if(disabled){accessibilityTraits.push('disabled');accessibilityStates.push('disabled');}return React.createElement(Surface,_extends({style:[styles.container,{elevation:Platform.OS==='android'?this.state.elevation:0,backgroundColor:selected?selectedBackgroundColor:backgroundColor,borderColor:borderColor,borderRadius:borderRadius},style]},rest,{__source:{fileName:_jsxFileName,lineNumber:221}}),React.createElement(TouchableRipple,{borderless:true,delayPressIn:0,style:{borderRadius:borderRadius},onPress:onPress,onLongPress:onLongPress,onPressIn:this.handlePressIn,onPressOut:this.handlePressOut,underlayColor:underlayColor,disabled:disabled,accessibilityLabel:accessibilityLabel,accessibilityTraits:accessibilityTraits,accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:accessibilityStates,testID:testID,__source:{fileName:_jsxFileName,lineNumber:238}},React.createElement(View,{style:styles.content,__source:{fileName:_jsxFileName,lineNumber:255}},avatar&&!icon?React.createElement(View,{style:[styles.avatarWrapper,disabled&&{opacity:0.26}],__source:{fileName:_jsxFileName,lineNumber:257}},React.isValidElement(avatar)?React.cloneElement(avatar,{style:[styles.avatar,avatar.props.style]}):avatar):null,icon||selected?React.createElement(View,{style:[styles.icon,avatar?[styles.avatar,styles.avatarSelected]:null],__source:{fileName:_jsxFileName,lineNumber:270}},React.createElement(Icon,{source:icon||'check',color:avatar?white:iconColor,size:18,__source:{fileName:_jsxFileName,lineNumber:276}})):null,React.createElement(Text,{numberOfLines:1,style:[styles.text,_objectSpread({},theme.fonts.regular,{color:textColor,marginRight:onClose?4:8,marginLeft:avatar||icon||selected?4:8}),textStyle],__source:{fileName:_jsxFileName,lineNumber:283}},children),onClose?React.createElement(TouchableWithoutFeedback,{onPress:onClose,accessibilityTraits:\"button\",accessibilityComponentType:\"button\",__source:{fileName:_jsxFileName,lineNumber:299}},React.createElement(View,{style:styles.icon,__source:{fileName:_jsxFileName,lineNumber:304}},React.createElement(Icon,{source:\"close-circle\",size:16,color:iconColor,__source:{fileName:_jsxFileName,lineNumber:305}}))):null)));}}]);return Chip;}(React.Component);Chip.defaultProps={mode:'flat',disabled:false,selected:false};var styles=StyleSheet.create({container:{borderWidth:StyleSheet.hairlineWidth,borderStyle:'solid'},content:{flexDirection:'row',alignItems:'center',paddingHorizontal:4},icon:{padding:4},text:{minHeight:24,lineHeight:24,textAlignVertical:'center',marginVertical:4},avatar:{width:24,height:24,borderRadius:12},avatarWrapper:{marginRight:4},avatarSelected:{position:'absolute',top:4,left:4,backgroundColor:'rgba(0, 0, 0, .29)'}});export default withTheme(Chip);","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","React","Component","defaultProps","mode","disabled","selected","state","elevation","Animated","handlePressIn","toValue","duration","handlePressOut","children","icon","avatar","accessibilityLabel","onPress","onLongPress","onClose","textStyle","style","theme","testID","selectedColor","rest","dark","colors","backgroundColor","borderRadius","StyleSheet","borderColor","color","textColor","iconColor","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityStates","styles","Platform","opacity","marginRight","marginLeft","container","borderWidth","borderStyle","content","flexDirection","alignItems","paddingHorizontal","padding","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","position","top","left","withTheme"],"mappings":"6mBAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,6UAYA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,IAAA,cACA,MAAA,CAAA,OAAA,iBACA,MAAA,CAAA,IAAA,yBACA,MAAA,CAAA,eAAA,yBACA,OAAA,SAAA,uBACA,OAAA,KAAA,CAAA,KAAA,wBAgGMA,GAAAA,CAAAA,I,sXAOJO,K,CAAQ,CACNC,SAAS,CAAE,GAAIC,CAAAA,QAAQ,CAAZ,KAAA,CADL,CACK,CADL,C,OAIAC,a,CAAgB,UAAM,CAC5BD,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,SAAAA,CAAsC,CACpCE,OAAO,CAD6B,CAAA,CAEpCC,QAAQ,CAFVH,GAAsC,CAAtCA,EAAAA,KAAAA,G,QAMMI,c,CAAiB,UAAM,CAC7BJ,QAAQ,CAARA,MAAAA,CAAgB,KAAA,CAAA,KAAA,CAAhBA,SAAAA,CAAsC,CACpCE,OAAO,CAD6B,CAAA,CAEpCC,QAAQ,CAFVH,GAAsC,CAAtCA,EAAAA,KAAAA,G,wEAMO,CAAA,GAAA,CAAA,WAAA,CAkBH,KAlBG,KAAA,CAELL,IAFK,CAAA,WAAA,CAAA,IAAA,CAGLU,QAHK,CAAA,WAAA,CAAA,QAAA,CAILC,IAJK,CAAA,WAAA,CAAA,IAAA,CAKLC,MALK,CAAA,WAAA,CAAA,MAAA,CAMLV,QANK,CAAA,WAAA,CAAA,QAAA,CAOLD,QAPK,CAAA,WAAA,CAAA,QAAA,CAQLY,kBARK,CAAA,WAAA,CAAA,kBAAA,CASLC,OATK,CAAA,WAAA,CAAA,OAAA,CAULC,WAVK,CAAA,WAAA,CAAA,WAAA,CAWLC,OAXK,CAAA,WAAA,CAAA,OAAA,CAYLC,SAZK,CAAA,WAAA,CAAA,SAAA,CAaLC,KAbK,CAAA,WAAA,CAAA,KAAA,CAcLC,KAdK,CAAA,WAAA,CAAA,KAAA,CAeLC,MAfK,CAAA,WAAA,CAAA,MAAA,CAgBLC,aAhBK,CAAA,WAAA,CAAA,aAAA,CAiBFC,IAjBE,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,UAAA,CAAA,UAAA,CAAA,oBAAA,CAAA,SAAA,CAAA,aAAA,CAAA,SAAA,CAAA,WAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,eAAA,CAAA,CAAA,CAAA,GAmBCC,CAAAA,IAnBD,CAmBkBJ,KAnBlB,CAAA,IAAA,CAmBOK,MAnBP,CAmBkBL,KAnBlB,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CA4BHQ,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,GA5BG,EAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,eAAA,CAsBLF,eAtBK,CAAA,oBAAA,GAAA,IAAA,EAAA,CAsBazB,IAAI,GAAJA,UAAAA,CACdwB,MAAM,CADQxB,OAAAA,CAEduB,IAAI,CAAA,SAAA,CAxBH,SAAA,CAAA,oBAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,YAAA,CA2BLG,YA3BK,CAAA,iBAAA,GAAA,IAAA,EAAA,CAAA,EAAA,CAAA,iBAAA,CA8BP,GAAME,CAAAA,WAAW,CACf5B,IAAI,GAAJA,UAAAA,CACI6B,KAAK,CACHR,aAAa,GAAbA,SAAAA,CAAAA,aAAAA,CAEIQ,KAAK,CAACN,IAAI,CAAA,KAAA,CAHhBM,KAGW,CAHN,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADJ7B,MACI6B,EADJ7B,CADF,eAAA,CAWA,GAAM8B,CAAAA,SAAS,CAAG7B,QAAQ,CACtBuB,MAAM,CADgB,QAAA,CAEtBK,KAAK,CAACR,aAAa,GAAbA,SAAAA,CAAAA,aAAAA,CAA8CG,MAAM,CAA1DK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFJ,MAEIA,EAFJ,CAMA,GAAME,CAAAA,SAAS,CAAG9B,QAAQ,CACtBuB,MAAM,CADgB,QAAA,CAEtBK,KAAK,CAACR,aAAa,GAAbA,SAAAA,CAAAA,aAAAA,CAA8CG,MAAM,CAA1DK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFJ,MAEIA,EAFJ,CAMA,GAAMG,CAAAA,uBAAuB,CAAG,CAACT,IAAI,CACjCM,KAAK,CAALA,eAAK,CAALA,CAAAA,OAAAA,CAA+B7B,IAAI,GAAJA,UAAAA,CAAAA,GAAAA,CADE,GACjC6B,CADiC,CAEjCA,KAAK,CAALA,eAAK,CAALA,CAAAA,MAAAA,CAA8B7B,IAAI,GAAJA,UAAAA,CAAAA,IAAAA,CAFF,GAE5B6B,CAF4B,EAAA,GAAA,GAAhC,MAAgC,EAAhC,CAOA,GAAMI,CAAAA,aAAa,CAAGZ,aAAa,CAC/BQ,KAAK,CAALA,aAAK,CAALA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA,GAAAA,GAD+B,MAC/BA,EAD+B,CAAnC,uBAAA,CAOA,GAAMK,CAAAA,mBAAyC,CAAG,CAAlD,QAAkD,CAAlD,CACA,GAAMC,CAAAA,mBAAyC,CAA/C,EAAA,CAEA,GAAA,QAAA,CAAc,CACZD,mBAAmB,CAAnBA,IAAAA,CAAAA,UAAAA,EACAC,mBAAmB,CAAnBA,IAAAA,CAAAA,UAAAA,EAGF,IAAA,QAAA,CAAc,CACZD,mBAAmB,CAAnBA,IAAAA,CAAAA,UAAAA,EACAC,mBAAmB,CAAnBA,IAAAA,CAAAA,UAAAA,EAGF,OACE,CAAA,KAAA,CAAA,aAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CACE,KAAK,CACH,CACEC,MAAM,CADR,SAAA,CAEE,CACEhC,SAAS,CAAEiC,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,CAA4B,KAAA,KAAA,CAA5BA,SAAAA,CADb,CAAA,CAEEZ,eAAe,CAAEvB,QAAQ,CAAA,uBAAA,CAF3B,eAAA,CAKE0B,WAAW,CALb,WAAA,CAMEF,YAAY,CARhB,YAEE,CAFF,CAFJ,KAEI,CAFJ,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAiBE,KAAA,CAAA,aAAA,CAAA,eAAA,CAAA,CACE,UAAU,CADZ,IAAA,CAEE,YAAY,CAFd,CAAA,CAGE,KAAK,CAAE,CAAEA,YAAY,CAHvB,YAGS,CAHT,CAIE,OAAO,CAJT,OAAA,CAKE,WAAW,CALb,WAAA,CAME,SAAS,CAAE,KANb,aAAA,CAOE,UAAU,CAAE,KAPd,cAAA,CAQE,aAAa,CARf,aAAA,CASE,QAAQ,CATV,QAAA,CAUE,kBAAkB,CAVpB,kBAAA,CAWE,mBAAmB,CAXrB,mBAAA,CAYE,0BAA0B,CAZ5B,QAAA,CAaE,iBAAiB,CAbnB,QAAA,CAcE,mBAAmB,CAdrB,mBAAA,CAeE,MAAM,CAfR,MAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAiBE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAEU,MAAM,CAAnB,OAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CACGxB,MAAM,EAAI,CAAVA,IAAAA,CACC,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CAACwB,MAAM,CAAP,aAAA,CAAuBnC,QAAQ,EAAI,CAAEqC,OAAO,CADrD,IAC4C,CAAnC,CADT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAGGzC,KAAK,CAALA,cAAAA,CAAAA,MAAAA,EAEGA,KAAK,CAALA,YAAAA,CAAAA,MAAAA,CAA2B,CAEzBqB,KAAK,CAAE,CAACkB,MAAM,CAAP,MAAA,CAAgBxB,MAAM,CAANA,KAAAA,CAJ5Bf,KAIY,CAFkB,CAA3BA,CAFHA,CAJJe,MACC,CADDA,CADH,IAAA,CAcGD,IAAI,EAAJA,QAAAA,CACC,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLyB,MAAM,CADD,IAAA,CAELxB,MAAM,CAAG,CAACwB,MAAM,CAAP,MAAA,CAAgBA,MAAM,CAAzB,cAAG,CAAH,CAHV,IACS,CADT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAME,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,MAAM,CAAEzB,IAAI,EADd,OAAA,CAEE,KAAK,CAAEC,MAAM,CAAA,KAAA,CAFf,SAAA,CAGE,IAAI,CAHN,EAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAPHD,GAOG,CAAA,CAAA,CANF,CADDA,CAdH,IAAA,CA4BE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,aAAa,CADf,CAAA,CAEE,KAAK,CAAE,CACLyB,MAAM,CADD,IAAA,CAAA,aAAA,CAAA,EAAA,CAGAjB,KAAK,CAALA,KAAAA,CAHA,OAAA,CAAA,CAIHU,KAAK,CAJF,SAAA,CAKHU,WAAW,CAAEvB,OAAO,CAAA,CAAA,CALjB,CAAA,CAMHwB,UAAU,CAAE5B,MAAM,EAANA,IAAAA,EAAAA,QAAAA,CAAAA,CAAAA,CANT,CAAA,CAAA,CAAA,CAFT,SAES,CAFT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CA5BF,QA4BE,CA5BF,CA2CGI,OAAO,CACN,KAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,CACE,OAAO,CADT,OAAA,CAEE,mBAAmB,CAFrB,QAAA,CAGE,0BAA0B,CAH5B,QAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAKE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAEoB,MAAM,CAAnB,IAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,MAAM,CAAZ,cAAA,CAA4B,IAAI,CAAhC,EAAA,CAAsC,KAAK,CAA3C,SAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAPE,GAOF,CAAA,CAAA,CADF,CALF,CADM,CA9EhB,IAmCM,CAjBF,CAjBF,CADF,C,mBAzGevC,KAAK,CAACC,S,CAAnBF,CAAAA,I,CACGG,YADHH,CACkC,CACpCI,IAAI,CADgC,MAAA,CAEpCC,QAAQ,CAF4B,KAAA,CAGpCC,QAAQ,CAH4B,KAAA,CADlCN,CAyMN,GAAMwC,CAAAA,MAAM,CAAGT,UAAU,CAAVA,MAAAA,CAAkB,CAC/Bc,SAAS,CAAE,CACTC,WAAW,CAAEf,UAAU,CADd,aAAA,CAETgB,WAAW,CAHkB,OACpB,CADoB,CAK/BC,OAAO,CAAE,CACPC,aAAa,CADN,KAAA,CAEPC,UAAU,CAFH,QAAA,CAGPC,iBAAiB,CARY,CAKtB,CALsB,CAU/BpC,IAAI,CAAE,CACJqC,OAAO,CAXsB,CAUzB,CAVyB,CAa/BC,IAAI,CAAE,CACJC,SAAS,CADL,EAAA,CAEJC,UAAU,CAFN,EAAA,CAGJC,iBAAiB,CAHb,QAAA,CAIJC,cAAc,CAjBe,CAazB,CAbyB,CAmB/BzC,MAAM,CAAE,CACN0C,KAAK,CADC,EAAA,CAENC,MAAM,CAFA,EAAA,CAGN7B,YAAY,CAtBiB,EAmBvB,CAnBuB,CAwB/B8B,aAAa,CAAE,CACbjB,WAAW,CAzBkB,CAwBhB,CAxBgB,CA2B/BkB,cAAc,CAAE,CACdC,QAAQ,CADM,UAAA,CAEdC,GAAG,CAFW,CAAA,CAGdC,IAAI,CAHU,CAAA,CAIdnC,eAAe,CA/BnB,oBA2BkB,CA3Be,CAAlBE,CAAf,CAmCA,cAAekC,CAAAA,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}