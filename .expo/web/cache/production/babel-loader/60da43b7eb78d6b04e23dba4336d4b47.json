{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectSpread from\"@babel/runtime/helpers/objectSpread\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Drawer/DrawerItem.tsx\";import color from'color';import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"../Typography/Text\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple\";import{withTheme}from\"../../core/theming\";var DrawerItem=function(_React$Component){_inherits(DrawerItem,_React$Component);function DrawerItem(){_classCallCheck(this,DrawerItem);return _possibleConstructorReturn(this,_getPrototypeOf(DrawerItem).apply(this,arguments));}_createClass(DrawerItem,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,label=_this$props.label,active=_this$props.active,theme=_this$props.theme,style=_this$props.style,onPress=_this$props.onPress,rest=_objectWithoutProperties(_this$props,[\"icon\",\"label\",\"active\",\"theme\",\"style\",\"onPress\"]);var colors=theme.colors,roundness=theme.roundness;var backgroundColor=active?color(colors.primary).alpha(0.12).rgb().string():'transparent';var contentColor=active?colors.primary:color(colors.text).alpha(0.68).rgb().string();var font=theme.fonts.medium;var labelMargin=icon?32:0;return React.createElement(View,_extends({},rest,{style:[styles.container,{backgroundColor:backgroundColor,borderRadius:roundness},style],__source:{fileName:_jsxFileName,lineNumber:71}}),React.createElement(TouchableRipple,{borderless:true,delayPressIn:0,onPress:onPress,style:{borderRadius:roundness},accessibilityTraits:active?['button','selected']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:active?['selected']:[],__source:{fileName:_jsxFileName,lineNumber:79}},React.createElement(View,{style:styles.wrapper,__source:{fileName:_jsxFileName,lineNumber:89}},icon?React.createElement(Icon,{source:icon,size:24,color:contentColor,__source:{fileName:_jsxFileName,lineNumber:91}}):null,React.createElement(Text,{numberOfLines:1,style:[styles.label,_objectSpread({color:contentColor},font,{marginLeft:labelMargin})],__source:{fileName:_jsxFileName,lineNumber:93}},label))));}}]);return DrawerItem;}(React.Component);DrawerItem.displayName='Drawer.Item';var styles=StyleSheet.create({container:{marginHorizontal:10,marginVertical:4},wrapper:{flexDirection:'row',alignItems:'center',padding:8},label:{marginRight:32}});export default withTheme(DrawerItem);","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","React","Component","displayName","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","color","contentColor","font","labelMargin","styles","borderRadius","marginLeft","StyleSheet","container","marginHorizontal","marginVertical","wrapper","flexDirection","alignItems","padding","marginRight","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : []}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}