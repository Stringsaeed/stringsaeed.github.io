{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Menu/MenuItem.tsx\";import color from'color';import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple\";import Text from\"../Typography/Text\";import{withTheme}from\"../../core/theming\";import{black,white}from\"../../styles/colors\";var MenuItem=function(_React$Component){_inherits(MenuItem,_React$Component);function MenuItem(){_classCallCheck(this,MenuItem);return _possibleConstructorReturn(this,_getPrototypeOf(MenuItem).apply(this,arguments));}_createClass(MenuItem,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,title=_this$props.title,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,style=_this$props.style;var disabledColor=color(theme.dark?white:black).alpha(0.32).rgb().string();var titleColor=disabled?disabledColor:color(theme.colors.text).alpha(0.87).rgb().string();var iconColor=disabled?disabledColor:color(theme.colors.text).alpha(0.54).rgb().string();return React.createElement(TouchableRipple,{style:[styles.container,style],onPress:onPress,disabled:disabled,__source:{fileName:_jsxFileName,lineNumber:66}},React.createElement(View,{style:styles.row,__source:{fileName:_jsxFileName,lineNumber:71}},icon?React.createElement(View,{style:[styles.item,styles.icon],pointerEvents:\"box-none\",__source:{fileName:_jsxFileName,lineNumber:73}},React.createElement(Icon,{source:icon,size:24,color:iconColor,__source:{fileName:_jsxFileName,lineNumber:74}})):null,React.createElement(View,{style:[styles.item,styles.content,icon?styles.widthWithIcon:null],pointerEvents:\"none\",__source:{fileName:_jsxFileName,lineNumber:77}},React.createElement(Text,{numberOfLines:1,style:[styles.title,{color:titleColor}],__source:{fileName:_jsxFileName,lineNumber:85}},title))));}}]);return MenuItem;}(React.Component);MenuItem.displayName='Menu.Item';var minWidth=112;var maxWidth=280;var iconWidth=40;var styles=StyleSheet.create({container:{padding:8,minWidth:minWidth,maxWidth:maxWidth},row:{flexDirection:'row'},icon:{width:iconWidth},title:{fontSize:16},item:{margin:8},content:{justifyContent:'center',minWidth:minWidth-16,maxWidth:maxWidth-16},widthWithIcon:{maxWidth:maxWidth-(iconWidth+48)}});export default withTheme(MenuItem);export{MenuItem};","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","Component","displayName","icon","title","disabled","onPress","theme","style","disabledColor","color","titleColor","iconColor","styles","minWidth","maxWidth","iconWidth","StyleSheet","container","padding","row","flexDirection","width","fontSize","item","margin","content","justifyContent","widthWithIcon","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, ViewStyle, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const { icon, title, disabled, onPress, theme, style } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}