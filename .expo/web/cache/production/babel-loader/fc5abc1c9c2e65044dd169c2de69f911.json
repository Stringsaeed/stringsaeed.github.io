{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/TextInput/TextInput.tsx\";import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import NativeTextInput from\"react-native-web/dist/exports/TextInput\";import Platform from\"react-native-web/dist/exports/Platform\";import TextInputOutlined from\"./TextInputOutlined\";import TextInputFlat from\"./TextInputFlat\";import{withTheme}from\"../../core/theming\";var BLUR_ANIMATION_DURATION=180;var FOCUS_ANIMATION_DURATION=150;var TextInput=function(_React$Component){_inherits(TextInput,_React$Component);function TextInput(){var _getPrototypeOf2;var _this;_classCallCheck(this,TextInput);for(var _len=arguments.length,_args=new Array(_len),_key=0;_key<_len;_key++){_args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(TextInput)).call.apply(_getPrototypeOf2,[this].concat(_args)));_this.state={labeled:new Animated.Value((_this.props.value!==undefined?_this.props.value:_this.props.defaultValue)?0:1),error:new Animated.Value(_this.props.error?1:0),focused:false,placeholder:'',value:_this.props.value!==undefined?_this.props.value:_this.props.defaultValue,labelLayout:{measured:false,width:0,height:0}};_this.showPlaceholder=function(){if(_this.timer){clearTimeout(_this.timer);}_this.timer=setTimeout(function(){return _this.setState({placeholder:_this.props.placeholder});},50);};_this.hidePlaceholder=function(){return _this.setState({placeholder:''});};_this.showError=function(){Animated.timing(_this.state.error,{toValue:1,duration:FOCUS_ANIMATION_DURATION,useNativeDriver:Platform.select({ios:false,default:true})}).start(_this.showPlaceholder);};_this.hideError=function(){Animated.timing(_this.state.error,{toValue:0,duration:BLUR_ANIMATION_DURATION,useNativeDriver:Platform.select({ios:false,default:true})}).start();};_this.restoreLabel=function(){return Animated.timing(_this.state.labeled,{toValue:1,duration:FOCUS_ANIMATION_DURATION,useNativeDriver:Platform.select({ios:false,default:true})}).start();};_this.minimizeLabel=function(){return Animated.timing(_this.state.labeled,{toValue:0,duration:BLUR_ANIMATION_DURATION,useNativeDriver:Platform.select({ios:false,default:true})}).start();};_this.handleFocus=function(args){if(_this.props.disabled||!_this.props.editable){return;}_this.setState({focused:true});if(_this.props.onFocus){_this.props.onFocus(args);}};_this.handleBlur=function(args){if(_this.props.disabled||!_this.props.editable){return;}_this.setState({focused:false});if(_this.props.onBlur){_this.props.onBlur(args);}};_this.handleChangeText=function(value){if(!_this.props.editable){return;}_this.setState({value:value});_this.props.onChangeText&&_this.props.onChangeText(value);};_this.handleLayoutAnimatedText=function(e){_this.setState({labelLayout:{width:e.nativeEvent.layout.width,height:e.nativeEvent.layout.height,measured:true}});};return _this;}_createClass(TextInput,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){if(prevState.focused!==this.state.focused||prevState.value!==this.state.value||prevState.labelLayout!==this.state.labelLayout){if(this.state.value||this.state.focused){this.minimizeLabel();}else{this.restoreLabel();}}if(prevState.focused!==this.state.focused||prevProps.label!==this.props.label){if(this.state.focused||!this.props.label){this.showPlaceholder();}else{this.hidePlaceholder();}}if(prevProps.error!==this.props.error){if(this.props.error){this.showError();}else{this.hideError();}}}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.timer){clearTimeout(this.timer);}}},{key:\"setNativeProps\",value:function setNativeProps(args){return this.root&&this.root.setNativeProps(args);}},{key:\"isFocused\",value:function isFocused(){return this.root&&this.root.isFocused();}},{key:\"clear\",value:function clear(){return this.root&&this.root.clear();}},{key:\"focus\",value:function focus(){return this.root&&this.root.focus();}},{key:\"blur\",value:function blur(){return this.root&&this.root.blur();}},{key:\"render\",value:function render(){var _this2=this;var _ref=this.props,mode=_ref.mode,rest=_objectWithoutProperties(_ref,[\"mode\"]);return mode==='outlined'?React.createElement(TextInputOutlined,_extends({},rest,{value:this.state.value,parentState:this.state,innerRef:function innerRef(ref){_this2.root=ref;},onFocus:this.handleFocus,onBlur:this.handleBlur,onChangeText:this.handleChangeText,onLayoutAnimatedText:this.handleLayoutAnimatedText,__source:{fileName:_jsxFileName,lineNumber:410}})):React.createElement(TextInputFlat,_extends({},rest,{value:this.state.value,parentState:this.state,innerRef:function innerRef(ref){_this2.root=ref;},onFocus:this.handleFocus,onBlur:this.handleBlur,onChangeText:this.handleChangeText,onLayoutAnimatedText:this.handleLayoutAnimatedText,__source:{fileName:_jsxFileName,lineNumber:423}}));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(nextProps,prevState){return{value:typeof nextProps.value!=='undefined'?nextProps.value:prevState.value};}}]);return TextInput;}(React.Component);TextInput.defaultProps={mode:'flat',dense:false,disabled:false,error:false,multiline:false,editable:true,render:function render(props){return React.createElement(NativeTextInput,_extends({},props,{__source:{fileName:_jsxFileName,lineNumber:174}}));}};export default withTheme(TextInput);","map":{"version":3,"sources":["TextInput.tsx"],"names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","React","Component","defaultProps","mode","dense","disabled","error","multiline","editable","render","nextProps","prevState","value","state","labeled","Animated","focused","placeholder","labelLayout","measured","width","height","prevProps","clearTimeout","showPlaceholder","setTimeout","hidePlaceholder","showError","toValue","duration","useNativeDriver","Platform","ios","default","hideError","restoreLabel","minimizeLabel","handleFocus","handleBlur","handleChangeText","handleLayoutAnimatedText","e","args","rest","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport { withTheme } from '../../core/theming';\nimport { RenderProps, State } from './types';\nimport { Theme, $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text to use for the floating label.\n   */\n  label?: string;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `heigh` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: any;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     text: ''\n *   };\n *\n *   render(){\n *     return (\n *       <TextInput\n *         label='Email'\n *         value={this.state.text}\n *         onChangeText={text => this.setState({ text })}\n *       />\n *     );\n *   }\n * }\n * ```\n *\n * @extends TextInput props https://facebook.github.io/react-native/docs/textinput.html#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n\n  state = {\n    labeled: new Animated.Value(\n      (this.props.value !== undefined\n      ? this.props.value\n      : this.props.defaultValue)\n        ? 0\n        : 1\n    ),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value:\n      this.props.value !== undefined\n        ? this.props.value\n        : this.props.defaultValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    if (\n      prevState.focused !== this.state.focused ||\n      prevState.value !== this.state.value ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      prevState.labelLayout !== this.state.labelLayout\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (\n      prevState.focused !== this.state.focused ||\n      prevProps.label !== this.props.label\n    ) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (prevProps.error !== this.props.error) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    // @ts-ignore\n    this.timer = setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    );\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: number;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start(this.showPlaceholder);\n  };\n\n  private hideError = () => {\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n  };\n\n  private restoreLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private minimizeLabel = () =>\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION,\n      // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n      useNativeDriver: Platform.select({\n        ios: false,\n        default: true,\n      }),\n    }).start();\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={ref => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}