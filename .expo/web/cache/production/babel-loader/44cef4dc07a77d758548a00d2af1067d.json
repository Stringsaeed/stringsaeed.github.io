{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/CheckboxIOS.tsx\";import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import Icon from\"./Icon\";import TouchableRipple from\"./TouchableRipple\";import{withTheme}from\"../core/theming\";var CheckboxIOS=function(_React$Component){_inherits(CheckboxIOS,_React$Component);function CheckboxIOS(){_classCallCheck(this,CheckboxIOS);return _possibleConstructorReturn(this,_getPrototypeOf(CheckboxIOS).apply(this,arguments));}_createClass(CheckboxIOS,[{key:\"render\",value:function render(){var _this$props=this.props,status=_this$props.status,disabled=_this$props.disabled,onPress=_this$props.onPress,theme=_this$props.theme,rest=_objectWithoutProperties(_this$props,[\"status\",\"disabled\",\"onPress\",\"theme\"]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=disabled?theme.colors.disabled:this.props.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=color(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=color(checkedColor).fade(0.32).rgb().string();}var icon=indeterminate?'minus':'check';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityStates:disabled?['disabled']:[],accessibilityLiveRegion:\"polite\",style:styles.container,__source:{fileName:_jsxFileName,lineNumber:76}}),React.createElement(View,{style:{opacity:indeterminate||checked?1:0},__source:{fileName:_jsxFileName,lineNumber:89}},React.createElement(Icon,{allowFontScaling:false,source:icon,size:24,color:checkedColor,__source:{fileName:_jsxFileName,lineNumber:90}})));}}]);return CheckboxIOS;}(React.Component);CheckboxIOS.displayName='Checkbox.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withTheme(CheckboxIOS);export{CheckboxIOS};","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","Component","displayName","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","rippleColor","color","icon","styles","opacity","StyleSheet","container","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkedColor}\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}