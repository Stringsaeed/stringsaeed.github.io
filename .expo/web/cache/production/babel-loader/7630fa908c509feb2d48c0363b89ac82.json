{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarAction.tsx\";import*as React from'react';import color from'color';import{black}from\"../../styles/colors\";import IconButton from\"../IconButton\";var AppbarAction=function(_React$Component){_inherits(AppbarAction,_React$Component);function AppbarAction(){_classCallCheck(this,AppbarAction);return _possibleConstructorReturn(this,_getPrototypeOf(AppbarAction).apply(this,arguments));}_createClass(AppbarAction,[{key:\"render\",value:function render(){var _this$props=this.props,_this$props$color=_this$props.color,iconColor=_this$props$color===void 0?color(black).alpha(0.54).rgb().string():_this$props$color,icon=_this$props.icon,disabled=_this$props.disabled,onPress=_this$props.onPress,accessibilityLabel=_this$props.accessibilityLabel,rest=_objectWithoutProperties(_this$props,[\"color\",\"icon\",\"disabled\",\"onPress\",\"accessibilityLabel\"]);return React.createElement(IconButton,_extends({onPress:onPress,color:iconColor,icon:icon,disabled:disabled,accessibilityLabel:accessibilityLabel,animated:true},rest,{__source:{fileName:_jsxFileName,lineNumber:60}}));}}]);return AppbarAction;}(React.Component);AppbarAction.displayName='Appbar.Action';AppbarAction.defaultProps={size:24};export{AppbarAction as default};","map":{"version":3,"sources":["AppbarAction.tsx"],"names":["AppbarAction","React","Component","displayName","defaultProps","size","iconColor","color","icon","disabled","onPress","accessibilityLabel","rest"],"mappings":"6jBAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,KAAA,KAAA,OAAA,CAEA,OAAA,KAAA,2BACA,MAAA,CAAA,UAAA,qBAkCqBA,GAAAA,CAAAA,Y,6RAOV,CAAA,GAAA,CAAA,WAAA,CAWH,KAXG,KAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,KAAA,CAEEM,SAFF,CAAA,iBAAA,GAAA,IAAA,EAAA,CAEcC,KAAK,CAALA,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAFd,MAEcA,EAFd,CAAA,iBAAA,CAMLC,IANK,CAAA,WAAA,CAAA,IAAA,CAOLC,QAPK,CAAA,WAAA,CAAA,QAAA,CAQLC,OARK,CAAA,WAAA,CAAA,OAAA,CASLC,kBATK,CAAA,WAAA,CAAA,kBAAA,CAUFC,IAVE,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,MAAA,CAAA,UAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,CAAA,CAaP,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CACE,OAAO,CADT,OAAA,CAEE,KAAK,CAFP,SAAA,CAGE,IAAI,CAHN,IAAA,CAIE,QAAQ,CAJV,QAAA,CAKE,kBAAkB,CALpB,kBAAA,CAME,QAAQ,CANV,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADF,EACE,CAAA,CAAA,CAAA,CADF,C,2BApBsCX,KAAK,CAACC,S,CAA3BF,CAAAA,Y,CACZG,WADYH,CACE,eADFA,CAAAA,Y,CAGZI,YAHYJ,CAGG,CACpBK,IAAI,CADgB,EAAA,CAHHL,C,OAAAA,Y","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport { IconSource } from '../Icon';\n\ntype Props = React.ComponentProps<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n */\nexport default class AppbarAction extends React.Component<Props> {\n  static displayName = 'Appbar.Action';\n\n  static defaultProps = {\n    size: 24,\n  };\n\n  render() {\n    const {\n      color: iconColor = color(black)\n        .alpha(0.54)\n        .rgb()\n        .string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n\n    return (\n      <IconButton\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}