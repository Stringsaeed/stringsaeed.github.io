{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/Surface.tsx\";import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import shadow from\"../styles/shadow\";import{withTheme}from\"../core/theming\";import overlay from\"../styles/overlay\";var Surface=function(_React$Component){_inherits(Surface,_React$Component);function Surface(){_classCallCheck(this,Surface);return _possibleConstructorReturn(this,_getPrototypeOf(Surface).apply(this,arguments));}_createClass(Surface,[{key:\"render\",value:function render(){var _this$props=this.props,style=_this$props.style,theme=_this$props.theme,rest=_objectWithoutProperties(_this$props,[\"style\",\"theme\"]);var flattenedStyles=StyleSheet.flatten(style)||{};var _flattenedStyles$elev=flattenedStyles.elevation,elevation=_flattenedStyles$elev===void 0?4:_flattenedStyles$elev;var isDarkTheme=theme.dark,mode=theme.mode,colors=theme.colors;return React.createElement(Animated.View,_extends({},rest,{style:[{backgroundColor:isDarkTheme&&mode==='adaptive'?overlay(elevation,colors.surface):colors.surface},elevation&&shadow(elevation),style],__source:{fileName:_jsxFileName,lineNumber:70}}));}}]);return Surface;}(React.Component);export default withTheme(Surface);","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","React","Component","style","theme","rest","flattenedStyles","StyleSheet","elevation","isDarkTheme","mode","colors","backgroundColor","overlay","shadow","withTheme"],"mappings":"ijBAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,8HAEA,MAAA,CAAA,MAAA,wBACA,OAAA,SAAA,uBAEA,MAAA,CAAA,OAAA,yBAyDMA,GAAAA,CAAAA,O,oQACK,CAAA,GAAA,CAAA,WAAA,CAC2B,KAD3B,KAAA,CACCG,KADD,CAAA,WAAA,CAAA,KAAA,CACQC,KADR,CAAA,WAAA,CAAA,KAAA,CACkBC,IADlB,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAEP,GAAMC,CAAAA,eAAe,CAAGC,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,GAAxB,EAAA,CAFO,GAAA,CAAA,qBAAA,CAG8BD,eAH9B,CAAA,SAAA,CAGCE,SAHD,CAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,CAAA,CAAA,qBAAA,CAAA,GAIOC,CAAAA,WAJP,CAIqCL,KAJrC,CAAA,IAAA,CAIoBM,IAJpB,CAIqCN,KAJrC,CAAA,IAAA,CAI0BO,MAJ1B,CAIqCP,KAJrC,CAAA,MAAA,CAKP,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAAE,CACL,CACEQ,eAAe,CACbH,WAAW,EAAIC,IAAI,GAAnBD,UAAAA,CACII,OAAO,CAAA,SAAA,CAAYF,MAAM,CAD7BF,OACW,CADXA,CAEIE,MAAM,CALT,OACL,CADK,CAOLH,SAAS,EAAIM,MAAM,CAPd,SAOc,CAPd,CAFT,KAES,CAFT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADF,EACE,CAAA,CAAA,CAAA,CADF,C,sBANkBb,KAAK,CAACC,S,CAAtBF,CAuBN,cAAee,CAAAA,SAAS,CAAxB,OAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentProps<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations.\n * Overlay and/or shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nclass Surface extends React.Component<Props> {\n  render() {\n    const { style, theme, ...rest } = this.props;\n    const flattenedStyles = StyleSheet.flatten(style) || {};\n    const { elevation = 4 }: ViewStyle = flattenedStyles;\n    const { dark: isDarkTheme, mode, colors } = theme;\n    return (\n      <Animated.View\n        {...rest}\n        style={[\n          {\n            backgroundColor:\n              isDarkTheme && mode === 'adaptive'\n                ? overlay(elevation, colors.surface)\n                : colors.surface,\n          },\n          elevation && shadow(elevation),\n          style,\n        ]}\n      />\n    );\n  }\n}\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"module"}