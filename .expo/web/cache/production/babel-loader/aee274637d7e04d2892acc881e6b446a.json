{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButton.tsx\";import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{withTheme}from\"../../core/theming\";import color from'color';import IconButton from\"../IconButton\";import ToggleButtonGroup,{ToggleButtonGroupContext}from\"./ToggleButtonGroup\";import ToggleButtonRow from\"./ToggleButtonRow\";import{black,white}from\"../../styles/colors\";var ToggleButton=function(_React$Component){_inherits(ToggleButton,_React$Component);function ToggleButton(){_classCallCheck(this,ToggleButton);return _possibleConstructorReturn(this,_getPrototypeOf(ToggleButton).apply(this,arguments));}_createClass(ToggleButton,[{key:\"render\",value:function render(){var _this$props=this.props,icon=_this$props.icon,size=_this$props.size,theme=_this$props.theme,accessibilityLabel=_this$props.accessibilityLabel,disabled=_this$props.disabled,style=_this$props.style,value=_this$props.value,status=_this$props.status,_onPress=_this$props.onPress,rest=_objectWithoutProperties(_this$props,[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"]);var borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,{__source:{fileName:_jsxFileName,lineNumber:117}},function(context){var backgroundColor;var checked=context&&context.value===value||status==='checked';if(checked){backgroundColor=theme.dark?'rgba(255, 255, 255, .12)':'rgba(0, 0, 0, .08)';}else{backgroundColor='transparent';}return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:color(theme.dark?white:black).alpha(0.29).rgb().string()},style]},rest,{__source:{fileName:_jsxFileName,lineNumber:133}}));});}}]);return ToggleButton;}(React.Component);ToggleButton.Group=ToggleButtonGroup;ToggleButton.Row=ToggleButtonRow;var styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default withTheme(ToggleButton);","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","React","Component","Group","ToggleButtonGroup","Row","ToggleButtonRow","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","checked","context","backgroundColor","styles","borderColor","color","StyleSheet","content","width","height","margin","withTheme"],"mappings":"mkBAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,iEAOA,OAAA,SAAA,0BACA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,UAAA,qBACA,MAAA,CAAA,iBAAA,EAAA,wBAAA,2BAGA,MAAA,CAAA,eAAA,yBACA,OAAA,KAAA,CAAA,KAAA,2BA+EMA,GAAAA,CAAAA,Y,6RAOK,CAAA,GAAA,CAAA,WAAA,CAYH,KAZG,KAAA,CAELO,IAFK,CAAA,WAAA,CAAA,IAAA,CAGLC,IAHK,CAAA,WAAA,CAAA,IAAA,CAILC,KAJK,CAAA,WAAA,CAAA,KAAA,CAKLC,kBALK,CAAA,WAAA,CAAA,kBAAA,CAMLC,QANK,CAAA,WAAA,CAAA,QAAA,CAOLC,KAPK,CAAA,WAAA,CAAA,KAAA,CAQLC,KARK,CAAA,WAAA,CAAA,KAAA,CASLC,MATK,CAAA,WAAA,CAAA,MAAA,CAULC,QAVK,CAAA,WAAA,CAAA,OAAA,CAWFC,IAXE,CAAA,wBAAA,CAAA,WAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAAA,CAaP,GAAMC,CAAAA,YAAY,CAAGR,KAAK,CAA1B,SAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CACG,SAAA,OAAA,CAAgE,CAC/D,GAAA,CAAA,eAAA,CAEA,GAAMS,CAAAA,OAAuB,CAC1BC,OAAO,EAAIA,OAAO,CAAPA,KAAAA,GAAZ,KAACA,EAAuCL,MAAM,GADhD,SAAA,CAGA,GAAA,OAAA,CAAa,CACXM,eAAe,CAAGX,KAAK,CAALA,IAAAA,CAAAA,0BAAAA,CAAlBW,oBAAAA,CADF,CAAA,IAIO,CACLA,eAAe,CAAfA,aAAAA,CAGF,OACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CACE,UAAU,CADZ,KAAA,CAEE,IAAI,CAFN,IAAA,CAGE,OAAO,CAAE,QAAA,CAAA,OAAA,CAAA,CAAA,CAAwC,CAC/C,GAAA,QAAA,CAAa,CACXL,QAAO,CAAPA,CAAO,CAAPA,CAGF,IAAA,OAAA,CAAa,CACXI,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,CAAA,KAAA,CAAtBA,IAAAA,EAEH,CAXH,CAAA,CAYE,IAAI,CAZN,IAAA,CAaE,kBAAkB,CAbpB,kBAAA,CAcE,QAAQ,CAdV,QAAA,CAeE,KAAK,CAAE,CACLE,MAAM,CADD,OAAA,CAEL,CACED,eAAe,CADjB,eAAA,CAEEH,YAAY,CAFd,YAAA,CAGEK,WAAW,CAAEC,KAAK,CAACd,KAAK,CAALA,IAAAA,CAAAA,KAAAA,CAANc,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GALV,MAKUA,EAHf,CAFK,CAfT,KAeS,CAfT,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CADF,GACE,CAAA,CAAA,CAAA,CADF,CAhBN,CACE,CADF,C,2BAtBuBtB,KAAK,CAACC,S,CAA3BF,CAAAA,Y,CAEGG,KAFHH,CAEWI,iBAFXJ,CAAAA,Y,CAKGK,GALHL,CAKSM,eALTN,CA2EN,GAAMqB,CAAAA,MAAM,CAAGG,UAAU,CAAVA,MAAAA,CAAkB,CAC/BC,OAAO,CAAE,CACPC,KAAK,CADE,EAAA,CAEPC,MAAM,CAFC,EAAA,CAGPC,MAAM,CAJV,CACW,CADsB,CAAlBJ,CAAf,CAQA,cAAeK,CAAAA,SAAS,CAAxB,YAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}