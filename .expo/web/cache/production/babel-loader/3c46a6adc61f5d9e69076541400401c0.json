{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";var _jsxFileName=\"/Users/trensik/dev/react-native-paper/src/components/List/ListAccordionGroup.tsx\";import*as React from'react';export var ListAccordionGroupContext=React.createContext(null);var ListAccordionGroup=function(_React$Component){_inherits(ListAccordionGroup,_React$Component);function ListAccordionGroup(){var _getPrototypeOf2;var _this;_classCallCheck(this,ListAccordionGroup);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(ListAccordionGroup)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={expandedId:undefined};_this.onAccordionPress=function(expandedId){_this.setState(function(_ref){var currentExpandedId=_ref.expandedId;return{expandedId:currentExpandedId===expandedId?undefined:expandedId};});};return _this;}_createClass(ListAccordionGroup,[{key:\"render\",value:function render(){var _this$props=this.props,expandedId=_this$props.expandedId,onAccordionPress=_this$props.onAccordionPress,children=_this$props.children;return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedId||this.state.expandedId,onAccordionPress:onAccordionPress||this.onAccordionPress},__source:{fileName:_jsxFileName,lineNumber:82}},children);}}]);return ListAccordionGroup;}(React.Component);ListAccordionGroup.displayName='List.AccordionGroup';export default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","Component","displayName","state","expandedId","onAccordionPress","currentExpandedId","children"],"mappings":"ubAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAsBA,MAAO,IAAMA,CAAAA,yBAAyB,CAAGC,KAAK,CAALA,aAAAA,CAAlC,IAAkCA,CAAlC,CA0CDC,GAAAA,CAAAA,kB,8aAGJG,K,CAAe,CACbC,UAAU,CADG,SAAA,C,OAIfC,gB,CAAmB,SAAA,UAAA,CAAiC,CAClD,KAAA,CAAA,QAAA,CAAc,SAAA,IAAA,CAAA,CAAA,GAAeC,CAAAA,iBAAf,CAAA,IAAA,CAAA,UAAA,CAAA,MAAwC,CACpDF,UAAU,CAAEE,iBAAiB,GAAjBA,UAAAA,CAAAA,SAAAA,CADA,UAAwC,CAAxC,CAAd,CAAA,E,sFAKO,CAAA,GAAA,CAAA,WAAA,CAC4C,KAD5C,KAAA,CACCF,UADD,CAAA,WAAA,CAAA,UAAA,CACaC,gBADb,CAAA,WAAA,CAAA,gBAAA,CAC+BE,QAD/B,CAAA,WAAA,CAAA,QAAA,CAGP,MACE,CAAA,KAAA,CAAA,aAAA,CAAC,yBAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLH,UAAU,CAAEA,UAAU,EAAI,KAAA,KAAA,CADrB,UAAA,CAELC,gBAAgB,CAAEA,gBAAgB,EAAI,KAH1C,gBACS,CADT,CAAA,QAAA,CAAA,CAAA,QAAA,CAAA,YAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,CADF,QACE,CADF,C,iCAhB6BN,KAAK,CAACE,S,CAAjCD,CAAAA,kB,CACGE,WADHF,CACiB,qBADjBA,CA6BN,cAAA,CAAA,kBAAA","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. Id prop for List.Accordion is required in order to group to work.\n * List.AccordionGroup can be controlled or uncontrolled component. Example shows uncontrolled version.\n * At most one Accordion will be expanded in given time.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * function MyComponent() {\n *  return (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n *  );\n * }\n *```\n */\n\ntype State = {\n  expandedId: string | number | undefined;\n};\n\nclass ListAccordionGroup extends React.Component<Props, State> {\n  static displayName = 'List.AccordionGroup';\n\n  state: State = {\n    expandedId: undefined,\n  };\n\n  onAccordionPress = (expandedId: string | number) => {\n    this.setState(({ expandedId: currentExpandedId }) => ({\n      expandedId: currentExpandedId === expandedId ? undefined : expandedId,\n    }));\n  };\n\n  render() {\n    const { expandedId, onAccordionPress, children } = this.props;\n\n    return (\n      <ListAccordionGroupContext.Provider\n        value={{\n          expandedId: expandedId || this.state.expandedId, // component can be controlled or uncontrolled\n          onAccordionPress: onAccordionPress || this.onAccordionPress,\n        }}\n      >\n        {children}\n      </ListAccordionGroupContext.Provider>\n    );\n  }\n}\n\nexport default ListAccordionGroup;\n"]},"metadata":{},"sourceType":"module"}